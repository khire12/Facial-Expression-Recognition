# -*- coding: utf-8 -*-
"""KDEF_bw.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1d7hpHk_QznqFgaFLYNlF4EYd2yavBW_c
"""

# Commented out IPython magic to ensure Python compatibility.
from google.colab.patches import cv2_imshow
import os
import pathlib
import cv2
# %tensorflow_version 2.x
import tensorflow as tf
import numpy as np
import pandas as pd

dir_train = '/content/drive/My Drive/Datasets/kdef_akdef/KDEF_front(with train-test-val split)/train'
dir_test = '/content/drive/My Drive/Datasets/kdef_akdef/KDEF_front(with train-test-val split)/test'
dir_val = '/content/drive/My Drive/Datasets/kdef_akdef/KDEF_front(with train-test-val split)/val'

def detect_face(frame):
  #Cascade classifier pretrained model
  cascPath = '/content/drive/My Drive/BE Project/sarvesh/haarcascades/haarcascade_frontalface_default.xml'
  faceCascade = cv2.CascadeClassifier(cascPath)
  #BGR to gray conversion
  gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
  #Cascade multiscale classifier
  detected_faces = faceCascade.detectMultiScale(gray, scaleFactor=1.1, minNeighbors=6,
                                                minSize=(200,200),
                                                flags=cv2.CASCADE_SCALE_IMAGE)
  coord=[]
  for x, y, w, h in detected_faces:
    if w>100:
      sub_img=frame[y:y+h,x:x+w]
      coord.append([x,y,w,h])
  return gray, detected_faces, coord

def extract_face_features(faces, offset_coeffs=(0.075,0.05)):
  gray=faces[0]
  detected_face=faces[1]
  new_face=[]
  for det in detected_face:
    x,y,w,h=det
    #offset-coeff, np.floor takes lowest int (delete border of image)
    hor_offset=np.int(np.floor(offset_coeffs[0]*w))
    ver_offset=np.int(np.floor(offset_coeffs[1]*h))
    extracted_face=gray[y+ver_offset:y+h, x+hor_offset:x-hor_offset+w]
    #zoom
    #new_extracted_face=scipy.ndimage.zoom(extracted_face,(200/extracted_face.shape[0],200/extracted_face.shape[1]))
    #new_extracted_face=new_extracted_face.astype(np.float32)
    #scale
    #new_extracted_face/=float(new_extracted_face.max())
    new_face.append(extracted_face)
  return new_face

def detectface(path):
  img=cv2.imread(path,-1)
  cascPath = '/content/drive/My Drive/BE Project/sarvesh/haarcascades/haarcascade_frontalface_default.xml'
  faceCascade = cv2.CascadeClassifier(cascPath)
  detected_faces=faceCascade.detectMultiScale(img, 1.3, 5, minSize=(200,200), flags=cv2.CASCADE_SCALE_IMAGE)
  for x, y, w, h in detected_faces:
    if w>100:
      sub_img=img[y:y+h,x:x+w]
      # print(sub_img)
      # print(np.array(sub_img).shape)
  return sub_img

count=0
for folder in sorted(os.listdir(dir_train)):
  for file in sorted(os.listdir(dir_train+"/"+folder)):
    path = (dir_train+"/"+folder+"/"+file)
    sub_img = detectface(path)
    img_gr=cv2.cvtColor(sub_img, cv2.COLOR_BGR2GRAY)
    img_re=cv2.resize(img_gr, dsize=(200,200),interpolation=cv2.INTER_AREA)
    cv2.imwrite("/content/drive/My Drive/Datasets/kdef_akdef/KDEF_front(bw)(with train-test-val split)/train/"+folder+"/"+file, img_re)
    count+=1
print("train: ",count)

count=0
for folder in sorted(os.listdir(dir_test)):
  for file in sorted(os.listdir(dir_test+"/"+folder)):
    path = (dir_test+"/"+folder+"/"+file)
    sub_img = detectface(path)
    img_gr=cv2.cvtColor(sub_img, cv2.COLOR_BGR2GRAY)
    img_re=cv2.resize(img_gr, dsize=(200,200), interpolation=cv2.INTER_AREA)
    cv2.imwrite("/content/drive/My Drive/Datasets/kdef_akdef/KDEF_front(bw)(with train-test-val split)/test/"+folder+"/"+file, img_re)
    count+=1
print("test: ",count)

count=0
for folder in sorted(os.listdir(dir_val)):
  for file in sorted(os.listdir(dir_val+"/"+folder)):
    path = (dir_val+"/"+folder+"/"+file)
    sub_img = detectface(path)
    img_gr=cv2.cvtColor(sub_img, cv2.COLOR_BGR2GRAY)
    img_re=cv2.resize(img_gr, dsize=(200,200), interpolation=cv2.INTER_AREA)
    cv2.imwrite("/content/drive/My Drive/Datasets/kdef_akdef/KDEF_front(bw)(with train-test-val split)/val/"+folder+"/"+file, img_re)
    count+=1
print("val: ",count)

sample=cv2.imread('/content/drive/My Drive/Datasets/kdef_akdef/KDEF_front(bw)(with train-test-val split)/train/surprise/BM35SUS.JPG',0)

np.array(sample).shape

